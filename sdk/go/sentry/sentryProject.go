// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # SentryProject Resource
//
// Sentry Project resource.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sentry.NewSentryProject(ctx, "default", &sentry.SentryProjectArgs{
// 			Organization: pulumi.String("my-organization"),
// 			Platform:     pulumi.String("javascript"),
// 			ResolveAge:   pulumi.Int(720),
// 			Slug:         pulumi.String("web-app"),
// 			Team:         pulumi.String("my-team"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// This resource can be imported using an ID made up of the organization slug and project slugbash
//
// ```sh
//  $ pulumi import sentry:index/sentryProject:SentryProject default org-slug/project-slug
// ```
type SentryProject struct {
	pulumi.CustomResourceState

	Color pulumi.StringOutput `pulumi:"color"`
	// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	DigestsMaxDelay pulumi.IntOutput `pulumi:"digestsMaxDelay"`
	// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	DigestsMinDelay pulumi.IntOutput         `pulumi:"digestsMinDelay"`
	Features        pulumi.StringArrayOutput `pulumi:"features"`
	// Deprecated: is_bookmarked is no longer used
	IsBookmarked pulumi.BoolOutput `pulumi:"isBookmarked"`
	IsPublic     pulumi.BoolOutput `pulumi:"isPublic"`
	// The human readable name for the project.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the project should be created for.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The integration platform.
	Platform  pulumi.StringOutput `pulumi:"platform"`
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Hours in which an issue is automatically resolve if not seen after this amount of time.
	ResolveAge pulumi.IntOutput `pulumi:"resolveAge"`
	// The unique URL slug for this project. If this is not provided a slug is automatically generated based on the name.
	Slug   pulumi.StringOutput `pulumi:"slug"`
	Status pulumi.StringOutput `pulumi:"status"`
	// The slug of the team the project should be created for.
	Team pulumi.StringOutput `pulumi:"team"`
}

// NewSentryProject registers a new resource with the given unique name, arguments, and options.
func NewSentryProject(ctx *pulumi.Context,
	name string, args *SentryProjectArgs, opts ...pulumi.ResourceOption) (*SentryProject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Team == nil {
		return nil, errors.New("invalid value for required argument 'Team'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SentryProject
	err := ctx.RegisterResource("sentry:index/sentryProject:SentryProject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryProject gets an existing SentryProject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryProject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryProjectState, opts ...pulumi.ResourceOption) (*SentryProject, error) {
	var resource SentryProject
	err := ctx.ReadResource("sentry:index/sentryProject:SentryProject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryProject resources.
type sentryProjectState struct {
	Color *string `pulumi:"color"`
	// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	DigestsMaxDelay *int `pulumi:"digestsMaxDelay"`
	// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	DigestsMinDelay *int     `pulumi:"digestsMinDelay"`
	Features        []string `pulumi:"features"`
	// Deprecated: is_bookmarked is no longer used
	IsBookmarked *bool `pulumi:"isBookmarked"`
	IsPublic     *bool `pulumi:"isPublic"`
	// The human readable name for the project.
	Name *string `pulumi:"name"`
	// The slug of the organization the project should be created for.
	Organization *string `pulumi:"organization"`
	// The integration platform.
	Platform  *string `pulumi:"platform"`
	ProjectId *string `pulumi:"projectId"`
	// Hours in which an issue is automatically resolve if not seen after this amount of time.
	ResolveAge *int `pulumi:"resolveAge"`
	// The unique URL slug for this project. If this is not provided a slug is automatically generated based on the name.
	Slug   *string `pulumi:"slug"`
	Status *string `pulumi:"status"`
	// The slug of the team the project should be created for.
	Team *string `pulumi:"team"`
}

type SentryProjectState struct {
	Color pulumi.StringPtrInput
	// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	DigestsMaxDelay pulumi.IntPtrInput
	// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	DigestsMinDelay pulumi.IntPtrInput
	Features        pulumi.StringArrayInput
	// Deprecated: is_bookmarked is no longer used
	IsBookmarked pulumi.BoolPtrInput
	IsPublic     pulumi.BoolPtrInput
	// The human readable name for the project.
	Name pulumi.StringPtrInput
	// The slug of the organization the project should be created for.
	Organization pulumi.StringPtrInput
	// The integration platform.
	Platform  pulumi.StringPtrInput
	ProjectId pulumi.StringPtrInput
	// Hours in which an issue is automatically resolve if not seen after this amount of time.
	ResolveAge pulumi.IntPtrInput
	// The unique URL slug for this project. If this is not provided a slug is automatically generated based on the name.
	Slug   pulumi.StringPtrInput
	Status pulumi.StringPtrInput
	// The slug of the team the project should be created for.
	Team pulumi.StringPtrInput
}

func (SentryProjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryProjectState)(nil)).Elem()
}

type sentryProjectArgs struct {
	// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	DigestsMaxDelay *int `pulumi:"digestsMaxDelay"`
	// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	DigestsMinDelay *int `pulumi:"digestsMinDelay"`
	// The human readable name for the project.
	Name *string `pulumi:"name"`
	// The slug of the organization the project should be created for.
	Organization string `pulumi:"organization"`
	// The integration platform.
	Platform *string `pulumi:"platform"`
	// Hours in which an issue is automatically resolve if not seen after this amount of time.
	ResolveAge *int `pulumi:"resolveAge"`
	// The unique URL slug for this project. If this is not provided a slug is automatically generated based on the name.
	Slug *string `pulumi:"slug"`
	// The slug of the team the project should be created for.
	Team string `pulumi:"team"`
}

// The set of arguments for constructing a SentryProject resource.
type SentryProjectArgs struct {
	// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
	DigestsMaxDelay pulumi.IntPtrInput
	// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
	DigestsMinDelay pulumi.IntPtrInput
	// The human readable name for the project.
	Name pulumi.StringPtrInput
	// The slug of the organization the project should be created for.
	Organization pulumi.StringInput
	// The integration platform.
	Platform pulumi.StringPtrInput
	// Hours in which an issue is automatically resolve if not seen after this amount of time.
	ResolveAge pulumi.IntPtrInput
	// The unique URL slug for this project. If this is not provided a slug is automatically generated based on the name.
	Slug pulumi.StringPtrInput
	// The slug of the team the project should be created for.
	Team pulumi.StringInput
}

func (SentryProjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryProjectArgs)(nil)).Elem()
}

type SentryProjectInput interface {
	pulumi.Input

	ToSentryProjectOutput() SentryProjectOutput
	ToSentryProjectOutputWithContext(ctx context.Context) SentryProjectOutput
}

func (*SentryProject) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryProject)(nil)).Elem()
}

func (i *SentryProject) ToSentryProjectOutput() SentryProjectOutput {
	return i.ToSentryProjectOutputWithContext(context.Background())
}

func (i *SentryProject) ToSentryProjectOutputWithContext(ctx context.Context) SentryProjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectOutput)
}

// SentryProjectArrayInput is an input type that accepts SentryProjectArray and SentryProjectArrayOutput values.
// You can construct a concrete instance of `SentryProjectArrayInput` via:
//
//          SentryProjectArray{ SentryProjectArgs{...} }
type SentryProjectArrayInput interface {
	pulumi.Input

	ToSentryProjectArrayOutput() SentryProjectArrayOutput
	ToSentryProjectArrayOutputWithContext(context.Context) SentryProjectArrayOutput
}

type SentryProjectArray []SentryProjectInput

func (SentryProjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryProject)(nil)).Elem()
}

func (i SentryProjectArray) ToSentryProjectArrayOutput() SentryProjectArrayOutput {
	return i.ToSentryProjectArrayOutputWithContext(context.Background())
}

func (i SentryProjectArray) ToSentryProjectArrayOutputWithContext(ctx context.Context) SentryProjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectArrayOutput)
}

// SentryProjectMapInput is an input type that accepts SentryProjectMap and SentryProjectMapOutput values.
// You can construct a concrete instance of `SentryProjectMapInput` via:
//
//          SentryProjectMap{ "key": SentryProjectArgs{...} }
type SentryProjectMapInput interface {
	pulumi.Input

	ToSentryProjectMapOutput() SentryProjectMapOutput
	ToSentryProjectMapOutputWithContext(context.Context) SentryProjectMapOutput
}

type SentryProjectMap map[string]SentryProjectInput

func (SentryProjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryProject)(nil)).Elem()
}

func (i SentryProjectMap) ToSentryProjectMapOutput() SentryProjectMapOutput {
	return i.ToSentryProjectMapOutputWithContext(context.Background())
}

func (i SentryProjectMap) ToSentryProjectMapOutputWithContext(ctx context.Context) SentryProjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryProjectMapOutput)
}

type SentryProjectOutput struct{ *pulumi.OutputState }

func (SentryProjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryProject)(nil)).Elem()
}

func (o SentryProjectOutput) ToSentryProjectOutput() SentryProjectOutput {
	return o
}

func (o SentryProjectOutput) ToSentryProjectOutputWithContext(ctx context.Context) SentryProjectOutput {
	return o
}

func (o SentryProjectOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringOutput { return v.Color }).(pulumi.StringOutput)
}

// The maximum amount of time (in seconds) to wait between scheduling digests for delivery.
func (o SentryProjectOutput) DigestsMaxDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.IntOutput { return v.DigestsMaxDelay }).(pulumi.IntOutput)
}

// The minimum amount of time (in seconds) to wait between scheduling digests for delivery after the initial scheduling.
func (o SentryProjectOutput) DigestsMinDelay() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.IntOutput { return v.DigestsMinDelay }).(pulumi.IntOutput)
}

func (o SentryProjectOutput) Features() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringArrayOutput { return v.Features }).(pulumi.StringArrayOutput)
}

// Deprecated: is_bookmarked is no longer used
func (o SentryProjectOutput) IsBookmarked() pulumi.BoolOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.BoolOutput { return v.IsBookmarked }).(pulumi.BoolOutput)
}

func (o SentryProjectOutput) IsPublic() pulumi.BoolOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.BoolOutput { return v.IsPublic }).(pulumi.BoolOutput)
}

// The human readable name for the project.
func (o SentryProjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the project should be created for.
func (o SentryProjectOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The integration platform.
func (o SentryProjectOutput) Platform() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringOutput { return v.Platform }).(pulumi.StringOutput)
}

func (o SentryProjectOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Hours in which an issue is automatically resolve if not seen after this amount of time.
func (o SentryProjectOutput) ResolveAge() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.IntOutput { return v.ResolveAge }).(pulumi.IntOutput)
}

// The unique URL slug for this project. If this is not provided a slug is automatically generated based on the name.
func (o SentryProjectOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o SentryProjectOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The slug of the team the project should be created for.
func (o SentryProjectOutput) Team() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryProject) pulumi.StringOutput { return v.Team }).(pulumi.StringOutput)
}

type SentryProjectArrayOutput struct{ *pulumi.OutputState }

func (SentryProjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryProject)(nil)).Elem()
}

func (o SentryProjectArrayOutput) ToSentryProjectArrayOutput() SentryProjectArrayOutput {
	return o
}

func (o SentryProjectArrayOutput) ToSentryProjectArrayOutputWithContext(ctx context.Context) SentryProjectArrayOutput {
	return o
}

func (o SentryProjectArrayOutput) Index(i pulumi.IntInput) SentryProjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryProject {
		return vs[0].([]*SentryProject)[vs[1].(int)]
	}).(SentryProjectOutput)
}

type SentryProjectMapOutput struct{ *pulumi.OutputState }

func (SentryProjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryProject)(nil)).Elem()
}

func (o SentryProjectMapOutput) ToSentryProjectMapOutput() SentryProjectMapOutput {
	return o
}

func (o SentryProjectMapOutput) ToSentryProjectMapOutputWithContext(ctx context.Context) SentryProjectMapOutput {
	return o
}

func (o SentryProjectMapOutput) MapIndex(k pulumi.StringInput) SentryProjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryProject {
		return vs[0].(map[string]*SentryProject)[vs[1].(string)]
	}).(SentryProjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectInput)(nil)).Elem(), &SentryProject{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectArrayInput)(nil)).Elem(), SentryProjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryProjectMapInput)(nil)).Elem(), SentryProjectMap{})
	pulumi.RegisterOutputType(SentryProjectOutput{})
	pulumi.RegisterOutputType(SentryProjectArrayOutput{})
	pulumi.RegisterOutputType(SentryProjectMapOutput{})
}
