// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package sentry

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # SentryRule Resource
//
// Sentry Rule resource. Note that there's no public documentation for the values of conditions, filters, and actions. You can either inspect the request payload sent when creating or editing an alert rule on Sentry or inspect [Sentry's rules registry in the source code](https://github.com/getsentry/sentry/tree/master/src/sentry/rules).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// 	"github.com/pulumiverse/pulumi-sentry/sdk/go/sentry"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := sentry.NewSentryRule(ctx, "default", &sentry.SentryRuleArgs{
// 			ActionMatch: pulumi.String("any"),
// 			Actions: pulumi.AnyMapArray{
// 				pulumi.AnyMap{
// 					"id":               pulumi.Any("sentry.mail.actions.NotifyEmailAction"),
// 					"name":             pulumi.Any("Send an email to IssueOwners"),
// 					"targetIdentifier": pulumi.Any(""),
// 					"targetType":       pulumi.Any("IssueOwners"),
// 				},
// 			},
// 			Conditions: pulumi.AnyMapArray{
// 				pulumi.AnyMap{
// 					"id":   pulumi.Any("sentry.rules.conditions.first_seen_event.FirstSeenEventCondition"),
// 					"name": pulumi.Any("A new issue is created"),
// 				},
// 			},
// 			Environment: pulumi.String("production"),
// 			Filters: pulumi.AnyMapArray{
// 				pulumi.AnyMap{
// 					"id":         pulumi.Any("sentry.rules.filters.assigned_to.AssignedToFilter"),
// 					"targetType": pulumi.Any("Unassigned"),
// 				},
// 			},
// 			Frequency:    pulumi.Int(30),
// 			Organization: pulumi.String("my-organization"),
// 			Project:      pulumi.String("web-app"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type SentryRule struct {
	pulumi.CustomResourceState

	// Use `all` to trigger alerting when all conditions are met, and `any` when at. least a condition is met. Defaults to `any`.
	ActionMatch pulumi.StringOutput `pulumi:"actionMatch"`
	// List of actions.
	Actions pulumi.MapArrayOutput `pulumi:"actions"`
	// List of conditions.
	Conditions pulumi.MapArrayOutput `pulumi:"conditions"`
	// Environment for these conditions to apply to.
	Environment pulumi.StringOutput `pulumi:"environment"`
	FilterMatch pulumi.StringOutput `pulumi:"filterMatch"`
	// List of filters.
	Filters pulumi.MapArrayOutput `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency pulumi.IntOutput `pulumi:"frequency"`
	// Name for this alert.
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the organization the plugin should be enabled for.
	Organization pulumi.StringOutput `pulumi:"organization"`
	// The slug of the project the plugin should be enabled for.
	Project pulumi.StringOutput `pulumi:"project"`
}

// NewSentryRule registers a new resource with the given unique name, arguments, and options.
func NewSentryRule(ctx *pulumi.Context,
	name string, args *SentryRuleArgs, opts ...pulumi.ResourceOption) (*SentryRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Actions == nil {
		return nil, errors.New("invalid value for required argument 'Actions'")
	}
	if args.Conditions == nil {
		return nil, errors.New("invalid value for required argument 'Conditions'")
	}
	if args.Organization == nil {
		return nil, errors.New("invalid value for required argument 'Organization'")
	}
	if args.Project == nil {
		return nil, errors.New("invalid value for required argument 'Project'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource SentryRule
	err := ctx.RegisterResource("sentry:index/sentryRule:SentryRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSentryRule gets an existing SentryRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSentryRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SentryRuleState, opts ...pulumi.ResourceOption) (*SentryRule, error) {
	var resource SentryRule
	err := ctx.ReadResource("sentry:index/sentryRule:SentryRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SentryRule resources.
type sentryRuleState struct {
	// Use `all` to trigger alerting when all conditions are met, and `any` when at. least a condition is met. Defaults to `any`.
	ActionMatch *string `pulumi:"actionMatch"`
	// List of actions.
	Actions []map[string]interface{} `pulumi:"actions"`
	// List of conditions.
	Conditions []map[string]interface{} `pulumi:"conditions"`
	// Environment for these conditions to apply to.
	Environment *string `pulumi:"environment"`
	FilterMatch *string `pulumi:"filterMatch"`
	// List of filters.
	Filters []map[string]interface{} `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency *int `pulumi:"frequency"`
	// Name for this alert.
	Name *string `pulumi:"name"`
	// The slug of the organization the plugin should be enabled for.
	Organization *string `pulumi:"organization"`
	// The slug of the project the plugin should be enabled for.
	Project *string `pulumi:"project"`
}

type SentryRuleState struct {
	// Use `all` to trigger alerting when all conditions are met, and `any` when at. least a condition is met. Defaults to `any`.
	ActionMatch pulumi.StringPtrInput
	// List of actions.
	Actions pulumi.MapArrayInput
	// List of conditions.
	Conditions pulumi.MapArrayInput
	// Environment for these conditions to apply to.
	Environment pulumi.StringPtrInput
	FilterMatch pulumi.StringPtrInput
	// List of filters.
	Filters pulumi.MapArrayInput
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency pulumi.IntPtrInput
	// Name for this alert.
	Name pulumi.StringPtrInput
	// The slug of the organization the plugin should be enabled for.
	Organization pulumi.StringPtrInput
	// The slug of the project the plugin should be enabled for.
	Project pulumi.StringPtrInput
}

func (SentryRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryRuleState)(nil)).Elem()
}

type sentryRuleArgs struct {
	// Use `all` to trigger alerting when all conditions are met, and `any` when at. least a condition is met. Defaults to `any`.
	ActionMatch *string `pulumi:"actionMatch"`
	// List of actions.
	Actions []map[string]interface{} `pulumi:"actions"`
	// List of conditions.
	Conditions []map[string]interface{} `pulumi:"conditions"`
	// Environment for these conditions to apply to.
	Environment *string `pulumi:"environment"`
	FilterMatch *string `pulumi:"filterMatch"`
	// List of filters.
	Filters []map[string]interface{} `pulumi:"filters"`
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency *int `pulumi:"frequency"`
	// Name for this alert.
	Name *string `pulumi:"name"`
	// The slug of the organization the plugin should be enabled for.
	Organization string `pulumi:"organization"`
	// The slug of the project the plugin should be enabled for.
	Project string `pulumi:"project"`
}

// The set of arguments for constructing a SentryRule resource.
type SentryRuleArgs struct {
	// Use `all` to trigger alerting when all conditions are met, and `any` when at. least a condition is met. Defaults to `any`.
	ActionMatch pulumi.StringPtrInput
	// List of actions.
	Actions pulumi.MapArrayInput
	// List of conditions.
	Conditions pulumi.MapArrayInput
	// Environment for these conditions to apply to.
	Environment pulumi.StringPtrInput
	FilterMatch pulumi.StringPtrInput
	// List of filters.
	Filters pulumi.MapArrayInput
	// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
	Frequency pulumi.IntPtrInput
	// Name for this alert.
	Name pulumi.StringPtrInput
	// The slug of the organization the plugin should be enabled for.
	Organization pulumi.StringInput
	// The slug of the project the plugin should be enabled for.
	Project pulumi.StringInput
}

func (SentryRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sentryRuleArgs)(nil)).Elem()
}

type SentryRuleInput interface {
	pulumi.Input

	ToSentryRuleOutput() SentryRuleOutput
	ToSentryRuleOutputWithContext(ctx context.Context) SentryRuleOutput
}

func (*SentryRule) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryRule)(nil)).Elem()
}

func (i *SentryRule) ToSentryRuleOutput() SentryRuleOutput {
	return i.ToSentryRuleOutputWithContext(context.Background())
}

func (i *SentryRule) ToSentryRuleOutputWithContext(ctx context.Context) SentryRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryRuleOutput)
}

// SentryRuleArrayInput is an input type that accepts SentryRuleArray and SentryRuleArrayOutput values.
// You can construct a concrete instance of `SentryRuleArrayInput` via:
//
//          SentryRuleArray{ SentryRuleArgs{...} }
type SentryRuleArrayInput interface {
	pulumi.Input

	ToSentryRuleArrayOutput() SentryRuleArrayOutput
	ToSentryRuleArrayOutputWithContext(context.Context) SentryRuleArrayOutput
}

type SentryRuleArray []SentryRuleInput

func (SentryRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryRule)(nil)).Elem()
}

func (i SentryRuleArray) ToSentryRuleArrayOutput() SentryRuleArrayOutput {
	return i.ToSentryRuleArrayOutputWithContext(context.Background())
}

func (i SentryRuleArray) ToSentryRuleArrayOutputWithContext(ctx context.Context) SentryRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryRuleArrayOutput)
}

// SentryRuleMapInput is an input type that accepts SentryRuleMap and SentryRuleMapOutput values.
// You can construct a concrete instance of `SentryRuleMapInput` via:
//
//          SentryRuleMap{ "key": SentryRuleArgs{...} }
type SentryRuleMapInput interface {
	pulumi.Input

	ToSentryRuleMapOutput() SentryRuleMapOutput
	ToSentryRuleMapOutputWithContext(context.Context) SentryRuleMapOutput
}

type SentryRuleMap map[string]SentryRuleInput

func (SentryRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryRule)(nil)).Elem()
}

func (i SentryRuleMap) ToSentryRuleMapOutput() SentryRuleMapOutput {
	return i.ToSentryRuleMapOutputWithContext(context.Background())
}

func (i SentryRuleMap) ToSentryRuleMapOutputWithContext(ctx context.Context) SentryRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SentryRuleMapOutput)
}

type SentryRuleOutput struct{ *pulumi.OutputState }

func (SentryRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SentryRule)(nil)).Elem()
}

func (o SentryRuleOutput) ToSentryRuleOutput() SentryRuleOutput {
	return o
}

func (o SentryRuleOutput) ToSentryRuleOutputWithContext(ctx context.Context) SentryRuleOutput {
	return o
}

// Use `all` to trigger alerting when all conditions are met, and `any` when at. least a condition is met. Defaults to `any`.
func (o SentryRuleOutput) ActionMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.StringOutput { return v.ActionMatch }).(pulumi.StringOutput)
}

// List of actions.
func (o SentryRuleOutput) Actions() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.MapArrayOutput { return v.Actions }).(pulumi.MapArrayOutput)
}

// List of conditions.
func (o SentryRuleOutput) Conditions() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.MapArrayOutput { return v.Conditions }).(pulumi.MapArrayOutput)
}

// Environment for these conditions to apply to.
func (o SentryRuleOutput) Environment() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.StringOutput { return v.Environment }).(pulumi.StringOutput)
}

func (o SentryRuleOutput) FilterMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.StringOutput { return v.FilterMatch }).(pulumi.StringOutput)
}

// List of filters.
func (o SentryRuleOutput) Filters() pulumi.MapArrayOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.MapArrayOutput { return v.Filters }).(pulumi.MapArrayOutput)
}

// Perform actions at most once every `X` minutes for this issue. Defaults to `30`.
func (o SentryRuleOutput) Frequency() pulumi.IntOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.IntOutput { return v.Frequency }).(pulumi.IntOutput)
}

// Name for this alert.
func (o SentryRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The slug of the organization the plugin should be enabled for.
func (o SentryRuleOutput) Organization() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.StringOutput { return v.Organization }).(pulumi.StringOutput)
}

// The slug of the project the plugin should be enabled for.
func (o SentryRuleOutput) Project() pulumi.StringOutput {
	return o.ApplyT(func(v *SentryRule) pulumi.StringOutput { return v.Project }).(pulumi.StringOutput)
}

type SentryRuleArrayOutput struct{ *pulumi.OutputState }

func (SentryRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*SentryRule)(nil)).Elem()
}

func (o SentryRuleArrayOutput) ToSentryRuleArrayOutput() SentryRuleArrayOutput {
	return o
}

func (o SentryRuleArrayOutput) ToSentryRuleArrayOutputWithContext(ctx context.Context) SentryRuleArrayOutput {
	return o
}

func (o SentryRuleArrayOutput) Index(i pulumi.IntInput) SentryRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *SentryRule {
		return vs[0].([]*SentryRule)[vs[1].(int)]
	}).(SentryRuleOutput)
}

type SentryRuleMapOutput struct{ *pulumi.OutputState }

func (SentryRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*SentryRule)(nil)).Elem()
}

func (o SentryRuleMapOutput) ToSentryRuleMapOutput() SentryRuleMapOutput {
	return o
}

func (o SentryRuleMapOutput) ToSentryRuleMapOutputWithContext(ctx context.Context) SentryRuleMapOutput {
	return o
}

func (o SentryRuleMapOutput) MapIndex(k pulumi.StringInput) SentryRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *SentryRule {
		return vs[0].(map[string]*SentryRule)[vs[1].(string)]
	}).(SentryRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SentryRuleInput)(nil)).Elem(), &SentryRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryRuleArrayInput)(nil)).Elem(), SentryRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SentryRuleMapInput)(nil)).Elem(), SentryRuleMap{})
	pulumi.RegisterOutputType(SentryRuleOutput{})
	pulumi.RegisterOutputType(SentryRuleArrayOutput{})
	pulumi.RegisterOutputType(SentryRuleMapOutput{})
}
